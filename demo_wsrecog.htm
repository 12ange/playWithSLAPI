<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,minimum-scale=1">
<title>音声でアイドル選択機能……の下準備</title>
<script async src="./sldb.js"></script>
<style>
#tapzone{ width: 75%; min-height: 3em; border: 3px ridge silver;}
#results,#recogs{
	width: 75%; line-height: 1.25em; border: 1px dotted black; margin-top: 1em;
}
#recogs{ font-size: smaller }

</style>
</head>
<body>
<h2>音声でアイドル選択する機能……の下準備</h2>
<p>使用可否の参考：<a href="https://caniuse.com/#feat=speech-recognition">Can I use | Speech Recognition API</a></p>
<!-- https://12ange.github.io/playWithSLAPI/demo_wsrecog.htm -->
<div id="tapzone">hold on... please wait...</div>
<div id="results">判定結果表示(毎回上書き)</div>
<div id="recogs">認識結果表示(毎回上書き)</div>

<script>
"use strict";
const NEW_TAG = tag => document.createElement(tag);
const GET_ID = id => document.getElementById(id);


/*** Chromeではオンライン・HTTPS必須 ***/
/*** FireFoxではブラウザ側での設定必須 ***/
const xSpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
//const xSpeechGrammarList = window.SpeechGrammarList || window.webkitSpeechGrammarList;
//20180611:文法については英語でも挙動が変なので(文法外でも認識する)、保留。
//const xSpeechRecognitionEvent = window.SpeechRecognitionEvent || window.webkitSpeechRecognitionEvent;

let timeRecognizing = 0 , isRecognizing = false;

let wsrecog = new xSpeechRecognition();

//認識に使う言語。これと違う言語で話しかけるとものの見事にとっちらかるｗ
wsrecog.lang = "ja";

//認識選択肢の最大数を変更。初期値は 1 。多いと拾いやすそう。
wsrecog.maxAlternatives = 99;
//20180611:Chromeデフォルトだと、増やしてもconfidenceはAlt#0番以外は0になるらしい(bug?)

wsrecog.addEventListener("result", _event=>{
	//音声認識結果イベント。型は xSpeechRecognitionEvent
	//.results は認識結果リスト。
	//.results.lengthが結果件数
	//.results[N] は認識結果。型は xSpeechRecognitionResultList
	//.results[N].isFinal が認識処理完了フラグ
	//.results[N].length が認識選択肢 alternative の数
	//.results[N][M] が認識選択肢。
	//.results[N][M].transcript が認識結果文
	//.results[N][M].confidence が信頼度

	//一番後ろの、認識処理完了した結果を対象とする
	let i = _event.results.length;
	while(--i >= 0){
		if(_event.results[i].isFinal){break}
	}
	if( i < 0 ){
		//全て認識処理完了してない
	}else{
		analyzeGoodRecogs(BuildRecogResult(_event.results[i]));
	}
});

wsrecog.addEventListener("nomatch", _event=>{
	//音声認識不能イベント。型は xSpeechRecognitionEvent
	//語彙を与える形の場合か？
	GET_ID("recogs").textContent = "[NO MATCH] "+_event.results.length;
	//console.log("nomatch");
	//console.log(_event.results);
});
wsrecog.addEventListener("error", _event=>{
	//_event.errorに理由の文字列。型は xSpeechRecognitionError
	GET_ID("recogs").textContent = `[ERROR] ${_event.error} / ${_event.message}`;
	//console.log(`error: ${_event.error} / ${_event.message}`);
});

//各種タイミングイベント
//start~end 音声認識受付開始~終了
//audiostart~audioend 音声収録開始~終了
//soundstart~soundend 何らかの音の入力を検知~終了
//speechstart~speechend 認識できそうな音の入力を検知~終了
wsrecog.addEventListener("start", ()=>{
	isRecognizing = true;
	timeRecognizing = Date.now();
	GET_ID("tapzone").textContent = "<onStart>";
});
wsrecog.addEventListener("end", ()=>{
	isRecognizing = false;
	GET_ID("tapzone").textContent += `<onEnd=${Date.now()-timeRecognizing}ms> TAPでもう一度`;
});
wsrecog.addEventListener("audiostart", ()=>{
	GET_ID("tapzone").textContent += `<onAudioStart=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("audioend", ()=>{
	GET_ID("tapzone").textContent += `<onAudioEnd=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("soundstart", ()=>{
	GET_ID("tapzone").textContent += `<onSoundStart=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("soundend", ()=>{
	GET_ID("tapzone").textContent += `<onSoundEnd=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("speechstart", ()=>{
	GET_ID("tapzone").textContent += `<onSpeechStart=${Date.now()-timeRecognizing}ms>`;
});
wsrecog.addEventListener("speechend", ()=>{
	GET_ID("tapzone").textContent += `<onSpeechEnd=${Date.now()-timeRecognizing}ms>`;
});

//エリアがタップされたら音声認識開始/停止。
GET_ID("tapzone").addEventListener("click",()=>{
	//初期化完了前に触られたら無視する
	if(gbInitialized){
		if(isRecognizing){wsrecog.stop()}else{wsrecog.start()}
	}
});

//==============================================================================

let gaIdolNames = [];
let gbInitialized = false;
let grexCharsIdolName = null; //アイドル名に含まれる文字
const gcFullScore = 100;

//漢字とルビの組
class TKanjiRuby {
	constructor( _kanji, _ruby ){
		this.kanji = _kanji;
		this.ruby_h = TKanjiRuby.NormalizeMark(_ruby); //ふりがな
		this.ruby_k = TKanjiRuby.Hira2Kata(this.ruby_h); //フリガナ
	}

	//濁点・半濁点の統一
	static NormalizeMark(_s){
		return _s.replace(
			/[\u3099\uFF9E]/g,"\u309B" //濁点の統一
		).replace(
			/[\u309A\uFF9F]/g,"\u309C" //半濁点の統一
		);
	}

	//ひらがなをカタカナに変換
	static Hira2Kata(_s){
		//まず単純変換でカタカナに寄せる ※U+3096はヶのひらがな版。ちなみにShiftJISには無い
		return _s.replace(
			/[\u3041-\u3096\u309D\u309E]/g,
			_ch=>String.fromCharCode( _ch.charCodeAt(0)+96 )
		).replace(
			//濁点＆半濁点が前の文字と結合できるかじっくりチェック
			/[\u30A1-\u30F6][\u309B\u309C]/g,
			_ss=>{
				let ch = _ss[0], mk = _ss.charCodeAt(1) === 0x309B; //trueは濁点、falseは半濁点
				if( ch === "ウ" && mk ){
					return "ヴ"; //ウとヴはcodepoint上で離れているので個別対応
				}else{
					let li = (mk?"カキクケコサシスセソタチツテト":"")+"ハヒフヘホ";
					if( li.includes(ch) ){
						return String.fromCharCode( ch.charCodeAt(0)+(mk?1:2) );
					}else{
						return _ss;
					}
				}
			}
		);
	}

	//出現文字全部
	getAllChar(){ return this.kanji+this.ruby_h+this.ruby_k }
}

function BuildRecogResult(_srrl){ //引数は xSpeechRecognitionResultList

	let aTrans = [], aConfs = [], aPassed = [];
	for( let o of _srrl ){
		aTrans.push(o.transcript);
		aConfs.push(o.confidence);
		aPassed.push(grexCharsIdolName.test(o.transcript));
		//aPassed に 認識結果にアイドル名に含まれる文字が一文字でも含まれているか？が入る
	}

	let nTopConf = aConfs[0];
	if( nTopConf === aConfs.reduce((p,c)=>p+c) ){
		//信頼度が最初の選択肢にしか割り振られていない
		for( let i=1 ; i<aConfs.length ; i++ ){
			//2つ目以降の信頼度を補完
			aConfs[i] = nTopConf * (1-nTopConf)**i;
		}
	}
	for( let i=aTrans.length-1 ; i >= 0 ; i-- ){ //後ろから
		if(!aPassed[i]){
			aTrans.splice(i,1); //抜き取る
			aConfs.splice(i,1); //ことで、
			aPassed.splice(i,1);//要素番号が詰まっても構わずに済む
		}
	}
	for( let m = 1/aConfs.reduce((p,c)=>p+c), i=0 ; i<aConfs.length ; i++ ){
		aConfs[i] *= m; //normalize
	}

	let myResult = [],
	    textResult = `[OK] 認識された選択肢 ${aTrans.length}個<br>`;
	for( let i=0 ; i<aTrans.length ; i++){
		myResult.push( { transcript:aTrans[i], confidence:aConfs[i]} );
		textResult += `(${i+1}) ${aTrans[i]} (${100*aConfs[i]}%)<br>`;
	}
	GET_ID("recogs").innerHTML = textResult;
	return myResult;
}

//==============================================================================

async function init() {
	if( ! await sldb.connect() ){
		GET_ID("tapzone").textContent = "[ERROR] SLDB接続失敗 "+sldb.info;
		return;
	}
	//有効な(被選挙権を持つ) chara_id を列挙(配列に収納) : デレステにカードがあるchara_idの一覧をつくる
	let setCharId = new Set(), arr = await sldb.requestCardList("keys=chara_id");
	arr.forEach( o=>{setCharId.add(o["chara_id"])} );

	arr = await sldb.requestCharDetail( ...setCharId ); //問い合わせ
	if(arr === null){
		GET_ID("tapzone").textContent = "[ERROR] SLDB詳細リクエスト失敗";
		return;
	}
	//返答から、必要な値のみ残す
	const baseurl = new sldb.URL( sldb.__createApiPath(sldb.__typeChar,101), sldb.hostConnected );
	let superlongstr = "";
	for(const o of arr){
		let p = {};
		p["name"] = o["name"];
		p["icon_src"] = new sldb.URL( o["icon_image_ref"], baseurl ).href; //ファイル名
		p["icon_alt"] = o["name"] + (o["voice"].length>0 ? ` (cv. ${o["voice"]})` : "");

		//一致検索用文字の配列。漢字とルビの組の配列。
		p["arr_test"] = ((_a,_b)=>{
			let r_ = [], i;
			for( i in _a ){
				let t = new TKanjiRuby(_a[i],_b[i]);
				r_.push(t);
				superlongstr += t.getAllChar(); //名前と振り仮名の文字を蒐集する。
			}
			return r_;
		})( o["kanji_spaced"].split(/[\s・]/), o["kana_spaced"].split(/[\s・]/) );
		gaIdolNames.push(p);
	}

	//音声認識結果除外用に使う正規表現の組み立て
	grexCharsIdolName = new RegExp(
		"["+[... new Set(superlongstr)].sort().join("").replace(/[\u3005\u3095-\u309F\u30F5-\u30FF]/g,"")+"]"
		//最後に除外されているのは小さい「かカけケ」、中点、伸ばし棒、濁点・半濁点、踊り字
	);
	//console.log(grexCharsIdolName.source);

	gbInitialized = true;
	GET_ID("tapzone").textContent = "開始・終了はこのエリアをTAP";
}
window.addEventListener("load",init);

//------------------------------------------------------------------------------

//引数1の文字列が引数2の文字列を「どれくらいそれっぽく含んでいるか」割合付けて返す
//-引数1. object:検索される側
//-引数2. subject:検索する側
//+返り値は0以上1以下のNumber
function rateIncludeLike( _sObj, _sSub ){

	//スプレッド演算子を使って、サロゲートペアを分解せずに文字列→文字ごとの配列変換
	let aObj = [..._sObj], aSub = [..._sSub];

	//見つかった文字の割合。
	let scoreFound = aSub.map( ch=>(aObj.indexOf(ch)>=0?1:0) ).reduce( (p,c)=>p+c,0 );

	//検索する側が１文字だったり、１文字も見つからなかったら計算打ち切り
	if( aSub.length===1 || scoreFound===0 ){return scoreFound}

	scoreFound /= aSub.length;

	//どれくらい連続したか
	let scoreOrder = aObj.map( (_ch,_idx)=>{
		let num = aSub.indexOf(_ch) //文字->subの何文字目と一致したか
		if( num===-1 ){return 0}
		let score=0;
		while( ++_idx<aObj.length && ++num<aSub.length && aObj[_idx]===aSub[num] ){
			score++; //aObj[_idx]===aSub[num]をずらしていく
		}
		return score;
	}).reduce(
		(p,c)=>(p>c?p:c) //最大値を得る
	) / (aSub.length-1);

	return (scoreFound+scoreOrder)/2;
}

//in 認識結果の一つ
//out 各indexの評価
function testResultAlt( _str_alt ){
	let ixIdol = gaIdolNames.length,
		aEvals = new Array(ixIdol).fill(0);

	while(--ixIdol >= 0){
		let testee = gaIdolNames[ixIdol]["arr_test"], //漢字とルビの組の配列
		    scoreGross = 0, iNext = 0, pos;

		//パーツが見つかれば満点
		//そうでなくても rateIncludeLike で部分点
		for( let tkr of testee ){
			if( (pos = _str_alt.indexOf(tkr.kanji, iNext) )>=0 ){
				//あった
				scoreGross += gcFullScore;
				iNext = pos + tkr.kanji.length;
			}else if( (pos = _str_alt.indexOf(tkr.ruby_h, iNext) )>=0 ){
				//あった
				scoreGross += gcFullScore;
				iNext = pos + tkr.ruby_h.length;
			}else if( (pos = _str_alt.indexOf(tkr.ruby_k, iNext) )>=0 ){
				//あった
				scoreGross += gcFullScore;
				iNext = pos + tkr.ruby_k.length;
			}else{
				//なかった
				scoreGross += gcFullScore * Math.max(
					rateIncludeLike(_str_alt, tkr.kanji),
					rateIncludeLike(_str_alt, tkr.ruby_h),
					rateIncludeLike(_str_alt, tkr.ruby_k),
				);
			}
		}//loop-end_testee
		aEvals[ixIdol] = scoreGross/testee.length;
	}//loop-end_ixIdol

	return aEvals;
}

//解析と結果
function analyzeGoodRecogs( _arr_recogs ){
	let totalScore = new Array(gaIdolNames.length).fill(0), aShorten = [], strHtml="";
	while( _arr_recogs.length > 0 ){
		let recog = _arr_recogs.pop();
		let tmp = testResultAlt(recog.transcript).map( v=>v*recog.confidence );
		for( let i in totalScore ){
			totalScore[i] += tmp[i];
		}
	}
	for( let i in totalScore ){
		if( totalScore[i] === 0 ) continue;
		aShorten.push( { index:i, score:totalScore[i] } );
	}
	aShorten.sort( (a,b)=>b.score-a.score ); //降順。

	for( let i in aShorten ){
		let idol = gaIdolNames[aShorten[i]["index"]];
		strHtml += `${i-0+1}. ${idol["name"]} (${aShorten[i]["score"].toFixed(3)}点)<br>`
	}

	GET_ID("results").innerHTML = strHtml;
}

//判定関数に投げて結果をテーブル表示
function dbg_testTRA( _str_alt ){
	let aEvals = testResultAlt(_str_alt), aShorten = [];
	for( let i in aEvals ){
		if( aEvals[i] === 0 ) continue;
		aShorten.push( { name:gaIdolNames[i]["name"], score:aEvals[i] } );
	}
	aShorten.sort( (a,b)=>b.score-a.score ); //降順。
	if(aShorten.length>30){aShorten.length=30}
	console.table(aShorten);
}

</script>
</body>
</html>
