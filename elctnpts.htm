<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,minimum-scale=1">
<title>総選挙結果で得点付与してポイントランキング</title>
<script async src="./sldb.js"></script>
<script async src="./imsprql.js"></script>
<script async src="./cachey.js"></script>
<link rel="stylesheet" type="text/css" href="imascgss.css">
<style>

td{padding:2px}

#tblhdr>tr>td{background-color:#666;color:white;font-weight:bold}

#tblbdy>tr>td{border-bottom:1px solid}
#tblbdy>tr>td.numcel{text-align:right}
#tblbdy>tr>td.imgcel{font-weight:bold}
#tblbdy>tr>td.imgcel>*{vertical-align:top}
#tblbdy>tr>td.imgcel>img{max-width:1.5em;max-height:1.5em;margin-right:.3em}

</style>
</head>
<body>
<noscript>JavaScriptを許可してください。= You must enable JavaScript to use.</noscript>
<table>
	<caption id="tblttl">Election Points Standings</caption>
	<thead id="tblhdr"></thead>
	<tbody id="tblbdy"></tbody>
</table>
<fieldset>
	<legend id="fldttl">Edit Point System</legend>
	<div>will be made.</div>
</fieldset>
<footer>It gets datas from <a href="https://starlight.kirara.ca/">Starlight Database</a> and <a href="https://sparql.crssnky.xyz/imas/">Im@sparql</a>.</footer>

<script>
"use strict";
const NEW_TAG = tag => document.createElement(tag);
const GET_ID = id => document.getElementById(id);

let gRankingSizes = [],
	gIdolToRanks = new Map(),
	gIdolDatabase = new Map();

//オブジェクトを合成する専用関数:set()の代わりに使う
gIdolDatabase.mergeKeyObj = function(key,obj){
	const vpr = this.get(key); //value-of-previous/present
	if( vpr === undefined ){
		return this.set(key,obj);
	}else{
		for( const i in obj ){
			//console.log(`${key}, ${obj[i]} => ${vpr[i]}`);
			vpr[i] = obj[i];
		}
		return this;
	}
};

//-------------------------------
// Starlight Database とやり取り
//-------------------------------
async function tellSLDB(){
	if( ! await sldb.connect() ){
		console.error("<SLDB接続失敗> "+sldb.listChar);
		return;
	}
	//有効な(被選挙権を持つ) chara_id を列挙(配列に収納)
	let arr = [];
	for (const entry of sldb.listChar) {
		const cid = parseInt( entry["chara_id"], 10 );
		if( 100<=cid && cid<=999 ){
			arr.push(cid);
		}
	}
	arr = await sldb.requestCharDetail( ...arr ); //問い合わせ
	if(arr === null){
		console.error("<SLDB詳細リクエスト失敗>");
		return;
	}
	//返答から、必要な値のみ残す
	const baseurl = new sldb.URL( sldb.getPathCharDetail(101), sldb.hostConnected );
	for(const o of arr){
		let p = {};
		p["src"] = new sldb.URL( o["icon_image_ref"], baseurl ).href; //ファイル名
		p["alt"] = o["name"] + (o["voice"].length>0 ? ` (cv. ${o["voice"]})` : "");
		p["type"] = o["type"];
		gIdolDatabase.mergeKeyObj(o["name"],p);
	}
}
//----------------------
// im@sparql とやり取り
//----------------------
async function tellIMSPRQL(){
	imsprql.prefixes.set(
		"imas","https://sparql.crssnky.xyz/imasrdf/URIs/imas-schema.ttl#"
	).set(
		"rdf","http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	).set(
		"schema","http://schema.org/"
	);
	const name = "nam", roundrank = "rnr", type ="typ";
	imsprql.setSelect(
		"?"+roundrank, "?"+name, "?"+type
	).addWhereSPO(
		"?"+roundrank, "rdf:type", "imas:CinderellaRankingResult"
	).andPO(
		"schema:member", "?uri"
	).addWhereSPO(
		"?uri", "rdf:type", "imas:Idol"
	).andPO(
		"schema:name", "?"+name
	).andPO(
		"imas:Type", "?"+type
	); //回と順位を表すURI,名前,属性
	let reqry = await imsprql.execute(), //********クエリ実行********
		mprounds = new Map(), //各回をまとめるMap
		mpnames = new Map(); //ランクインした名前一覧
	for(const o of reqry){
		let [rnd,rnk] = o[roundrank].value.split("/").pop().split("_"); //URIを[round,rank]に分解
		//回次はString型のまま、Mapのkeyに利用する。順位もString型のまま、二次ソートに利用する。
		let v = mprounds.get(rnd);
		if(v === undefined){
			v = mprounds.set(rnd,new Map()).get(rnd); //その回のデータがないので新規作成
		}
		v.set( rnk, o[name].value ); //当該回のデータに[順位,名前]追加
		mpnames.set( o[name].value, o[type].value ); //名前と属性の組
	}
	//各回の順位ソート済み名前を得る、とともに各回の圏内人数も得る
	let arrnkbyname = [];
	//キーを外部でソートすることで開催順に取り出せる↓↓。両方同じ。
	for(const krd of Array.from(mprounds.keys()).sort()){
		let arrnk1 = []; //1回順位表
		const mp_rnk = mprounds.get(krd);
		for(const krk of Array.from(mp_rnk.keys()).sort()){
			arrnk1.push(mp_rnk.get(krk)); //ソート済みkeyの順に従ってvalue=名前を収める
		}
		arrnkbyname.push( arrnk1 );
		gRankingSizes.push( mp_rnk.size );
	}
	//今度は名前を基準に順位を出す
	for (const n of mpnames.keys()) {
		let a = new Array(arrnkbyname.length);
		for(const i in arrnkbyname){
			a[i] = arrnkbyname[i].indexOf(n)+1; //見つからない時に-1が返るのを利用
		}
		gIdolToRanks.set(n,a);
	}
	//ランクインした名前一覧を出力する
	for (const [k,v] of mpnames.entries()) {
		gIdolDatabase.mergeKeyObj(k, {"type":v} );
	}
}

//得点計算方法を生成する
function createPointSystem( size, setStr="" ){
	let arr = Array(size).fill(0);
	for(let i=0; i<size; i++){
		arr[i]+=( size-i ); //(本来は引数に従う)
	}
	return arr;
}

//得点表を組み立てる
function buildPointTable(){
	let pt = [];
	for(const sz of gRankingSizes){
		pt.push( createPointSystem(sz) );
	}
	return pt;
}

//得点計算をアイドルに反映
function applyPtSysTbl( pointtable ){
	//マップする
	const nrd = gRankingSizes.length; //催行回数
	let mappt = new Map();
	for (const [name,ranks] of gIdolToRanks.entries()) {
		let arpt = []; //各回得点配列
		for(let i=0; i<nrd; i++){
			let pt = ranks[i]===0 ? 0 : pointtable[i][ranks[i]-1]; //ranks[i]が当回の順位
			arpt.push( pt );
		}
		mappt.set( name, arpt );
	}
	updateTableWithMap(mappt);
}

//変換しながら実テーブルにぶら下げる
function updateTableWithMap( mapIdolPoints ){
	let tr;
	const tblhdr = GET_ID("tblhdr");
	const tblbdy = GET_ID("tblbdy");
	const clearTableSection = sctn => { while(sctn.rows.length>0){ sctn.deleteRow(0); } }; //全行消去

	//tbodyに入るデータを丸々用意して、並べ替える
	let arrtbd = [];
	for(const [name,pts] of mapIdolPoints.entries()){
		const sum = pts.reduce( (a,c)=>a+c );
		arrtbd.push( [name,...pts,sum] );
	}
	arrtbd.sort( (a,b)=>b[b.length-1]-a[a.length-1] ); //降順
	for (const i in arrtbd) {
		arrtbd[i].unshift(i- -1); //文字列を数字にしつつ1足す
	}

	//arrtbdを反映
	GET_ID("tblttl").textContent = "総選挙結果得点表";

	//ヘッダ部更新
	clearTableSection(tblhdr);
	tr = tblhdr.insertRow(-1);
	tr.insertCell(0).textContent = "位";
	tr.insertCell(1).textContent = "名前";
	for(let i=1; i<=gRankingSizes.length; i++){
		tr.insertCell(-1).textContent = `第${i}回`;
	}
	tr.insertCell(-1).textContent = "合計点";

	//本体部更新
	clearTableSection(tblbdy);
	for(const a of arrtbd){
		tr = tblbdy.insertRow(-1);
		tr.className = "imascgss "+(t=>{
			if( /^cu/i.test(t) ){return "cute";}
			else if( /^co/i.test(t) ){return "cool";}
			else if( /^pa/i.test(t) ){return "passion";}
			else{return "notidol";}
		})(gIdolDatabase.get(a[1])["type"]);
		for(const o of a){
			const td = tr.insertCell(-1);
			if( typeof o === "number" ){
				td.className = "numcel";
				td.textContent = o;
			}else{
				td.className = "imgcel";
				td.innerHTML = `<span>${o}</span>`;
			}
		}
	}
}

//編集部
function setupEditZone(){
	const fldttl = GET_ID("fldttl");
	fldttl.textContent = "得点計算方法を変更する";
	fldttl.nextElementSibling.textContent = "作成中…………現時点では(1+圏内人数-順位)点を与えています。";
}

//得点表示部の名前の前に画像を追加
function addIconBeforeName(){
	const tds_name = document.getElementsByClassName("imgcel");
	for(const td of tds_name){
		const rcd = gIdolDatabase.get(td.textContent);
		if(rcd !== undefined){
			const img = NEW_TAG("img");
			img.alt = rcd["alt"];
			cachey.requestOrFetch( rcd["src"] ).then(blb=>{
				const xURL = window.URL || window.webkitURL;
				img.src = xURL.createObjectURL( blb )
			});
			td.insertBefore(img,td.firstChild);
		}
	}
}

//リソース全部準備できたら始まる
window.addEventListener("load",()=>{
	//const tmBegin = Date.now();
	const prom1 = tellIMSPRQL().then( ()=>{
		//Im@sparqlからの返答だけでできること
		let x = buildPointTable();
		applyPtSysTbl( x );
		//console.log("prom1="+(Date.now()-tmBegin));
	} );
	Promise.all( [
		tellSLDB(), prom1, setupEditZone()
	] ).then( ()=>{
		//SLDBの返答も必要なこと
		addIconBeforeName();
		//console.log("promA="+(Date.now()-tmBegin));
	} );
});
</script>
</body>
</html>
