<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8">
<title>タイトルコール当てクイズ</title>
<style type="text/css">

/* Fukol https://github.com/Heydon/fukol-grids */
.fukol-grid{display:flex;flex-wrap:wrap;margin:-.5em;}
.fukol-grid>*{flex:1 0 5em;margin:.5em;}
/* 属性色設定 */
.imascg-cute{color:#e26; background-color:#fdd}
.imascg-cool{color:#06f; background-color:#eef}
.imascg-passion{color:#c80; background-color:#feb}

</style>
</head>
<body>
<script>

"use strict";
const NEW_TAG = (tag) => document.createElement(tag);
const GET_ID = (id) => document.getElementById(id);

// AudioContext初期化 by Mozilla
const gAudioCtx = new (window.AudioContext || window.webkitAudioContext)();
// Webkit/blink系ブラウザは接頭辞が必要、Safariは「window.」をつけないと動かない
const gURL = window.URL || window.webkitURL; //URLも同様らしいのでそうしておく

let arIdoldatas = [];
let divLog = null;

class tIdol {
	constructor( _cid, _name, _voice ){
		this.cid = _cid;      //ID
		this.name = _name;    //名前
		this.voice = _voice;  //担当声優
		this.bufvoice = null; //音声 as デコード済みAudioData
		this.ourlicon = null; //画像 as objectURL
		this.imgelmnt = NEW_TAG("img");
		this.imgelmnt.alt = _name + ( _voice ? `(cv. ${_voice})` : "" );
		this.btnelmnt = NEW_TAG("button");
		this.btnelmnt.appendChild( this.imgelmnt );
		this.btnelmnt.onclick = this.onIconButton;
		this.btnelmnt.owner = this; //buttonからこのクラス自体にアクセスできるように
	}
	get attribute(){
		return this.cid>=234 ? "passion" : (this.cid>=167 ? "cool" : "cute");
	}
	setVoiceByResponse( _res ){
		_res.arrayBuffer().then( e=>{
			return gAudioCtx.decodeAudioData(e);
		} ).then( e=>{
			this.bufvoice = e;
			this.btnelmnt.disabled = false;
		} ).catch( e=>{
			//ArrayBuffer変換失敗も、デコード失敗も。
			this.bufvoice = null;
			this.btnelmnt.disabled = true;
		} );
	}
	setIconByResponse( _res ){
		_res.blob().then( e=>{
			this.imgelmnt.src = this.ourlicon = gURL.createObjectURL(e);
		}, e=>{this.ourlicon = null;} );
	}
	playVoice( _dest, _timing ){
		if( ! this.bufvoice ) return false;

		let bfsrc = gAudioCtx.createBufferSource();
		bfsrc.buffer = this.bufvoice;
		bfsrc.connect( _dest );
		bfsrc.start( _timing );

		return true;
	}
	//ボタンを押すとタイトルコール
	onIconButton(){
		this.owner.playVoice( gAudioCtx.destination, gAudioCtx.currentTime );
	}
}

// ++非同期関数++ 問い合わせてレスポンスのJSONをオブジェクトに変換して返す。次の関数でのみ使う
async function asyncFetchAndStrip( url ) {
	const resReq = await fetch( url.href );
	return (await resReq.json())["result"];
}

// ++非同期関数++ リソースの読み出し
async function asyncFetchResources() {
	//URLインターフェースを利用して引数を安全にURL化(さもなくば例外を投げる)
	const firstRequestURL = new gURL("https://starlight.kirara.ca/api/v1/list/char_t?keys=chara_id");
	const arrslt = await asyncFetchAndStrip(firstRequestURL);
	const arCharIds = arrslt.map( r=>r["chara_id"] );
	//大量のfetchを発して相手サーバに負荷をかけるのも悪いので、わざと一つずつfetchしている。

	const elmfukol = NEW_TAG("div");
	elmfukol.className = "fukol-grid";
	divLog.appendChild(elmfukol);

	let cnt = 0;
	for( let idx = 0 ; idx < arCharIds.length ; idx++  ){
		let charId = arCharIds[idx];
		let secondRequestURL = new gURL(`/api/v1/char_t/${charId}`, firstRequestURL);
		let objrslt = (await asyncFetchAndStrip(secondRequestURL))[0];
		//アイドル個人の情報のvoiceが空文字列ではない＝タイトルコールがある「かもしれない」。
		//例えば2017年の「恋が咲く季節」イベントの時(だと思われる)、この曲を歌うアイドルのCV 5名分 が反映されたものの、
		//タイトルコール実装はカード報酬となった2名にとどまっている。
		//タイトルコールが存在するかは個人情報JSONに現れないので直接音声ファイルのURLを叩いてみる。

		if( objrslt["voice"] ){
			//先に音声の所在を確認し、成功したら画像を取り寄せる、の順。
			//URLを相対から絶対に変換しておく
			const id2vo = id => "/va2/"+(id ^ 0x1042fc).toString(16)+"10442d16ab.mp3";
			const urlic = new gURL( objrslt["icon_image_ref"], secondRequestURL ).href;
			const urlvo = new gURL( id2vo(charId), urlic ).href; //音声は画像と同じサーバにあるらしい。本家ソースちら見した限り。
			//即fetchしてステータスを見る
			let resvo = await fetch(urlvo).catch( e=>{console.log("動作には支障ありません。");} ); //fetchのerrorは(try-catchと同様)、prms.catchでまるっと処理してしまえる
			if( resvo && resvo.status === 200 ){
				//音声があった！
				const resic = await fetch(urlic);
				if( resic.status === 200 ){ //画像もOK
					//新しいobjを作ってグローバル配列に追加
					let objIdol = new tIdol(charId, objrslt["name"], objrslt["voice"]);
					objIdol.setVoiceByResponse(resvo);
					objIdol.setIconByResponse(resic);
					arIdoldatas.push(objIdol);
					//グリッドシステムに表示ブロックを入れ込む。
					let p = NEW_TAG("div");
					p.className = "imascg-"+objIdol.attribute;
					p.appendChild( objIdol.btnelmnt );
					p.appendChild( NEW_TAG("br") );
					let q = NEW_TAG("span");
					q.textContent = `#${++cnt}-${idx}/${arCharIds.length}[${objIdol.cid}]`;
					p.appendChild( q );
					elmfukol.insertBefore(p, elmfukol.firstChild);
				}
			}
		}
	}
	let p = NEW_TAG("p");
	p.textContent = `読み取り完了。全 ${arCharIds.length} 人中ボイス設定ありは ${cnt} 人でした。`;
	divLog.insertBefore(p, divLog.firstChild);
}

//ページ読み込み時処理
window.addEventListener("load",()=>{
	divLog = NEW_TAG("div");
	document.body.appendChild(divLog);
	asyncFetchResources();
});

</script>
</body>
</html>
